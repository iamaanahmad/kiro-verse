"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { CodeXml, Loader2, Sparkles } from "lucide-react";
import KiroSpecDisplay from "./KiroSpecDisplay";

interface CodeEditorProps {
  code: string;
  onCodeChange: (code: string) => void;
  onGetFeedback: () => void;
  aiFeedback: string;
  isLoading: boolean;
}

const codeFeedbackSpec = {
  requirements: `
- The user needs to receive constructive feedback on a piece of code they provide.
- The feedback should be generated by an AI mentor (Kiro).
- The feedback should analyze code quality, identify potential errors, and suggest improvements.
- The entire process should be triggered by a single button click.
  `,
  design: `
- A Genkit flow named 'getCodeFeedbackFlow' will be created.
- This flow will take the user's code as a string input.
- It will use the Gemini 2.0 Flash model with a prompt that instructs it to act as an AI code mentor named Kiro.
- The flow will output a single string containing the formatted feedback.
- A server action 'getCodeFeedbackAction' will wrap this flow to be securely called from the client.
- The frontend 'CodeEditor' component will have a state to hold the AI-generated feedback and a loading state.
- When the "Get AI Code Feedback" button is clicked, it will call the server action, display a loading indicator, and then show the returned feedback in a designated area.
  `,
  tasks: `
  1. **Backend:** Create 'src/ai/flows/get-code-feedback.ts' with the 'getCodeFeedbackFlow'.
  2. **Backend:** Define input (z.object({ code: z.string() })) and output (z.object({ feedback: z.string() })) schemas.
  3. **Backend:** Write the prompt for Kiro's persona and instructions.
  4. **Backend:** Create 'getCodeFeedbackAction' in 'src/app/actions.ts' to invoke the flow.
  5. **Frontend:** Add 'aiFeedback' and 'isLoading' state to the 'KiroApp' component.
  6. **Frontend:** Pass state and the handler function to the 'CodeEditor' component.
  7. **Frontend:** In 'CodeEditor', add a ScrollArea to display the feedback text.
  8. **Frontend:** Implement the 'onGetFeedback' handler to call the server action and update state.
  9. **Frontend:** Display a loader while the feedback is being generated.
  `,
};

export default function CodeEditor({ code, onCodeChange, onGetFeedback, aiFeedback, isLoading }: CodeEditorProps) {
  return (
    <Card className="h-full flex flex-col shadow-md">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 font-headline">
          <CodeXml className="h-6 w-6" />
          Code Editor
        </CardTitle>
        <CardDescription>Write or paste your code here to get AI-powered feedback.</CardDescription>
      </CardHeader>
      <CardContent className="flex-grow flex flex-col gap-4">
        <div className="relative flex-grow">
          <Textarea
            value={code}
            onChange={(e) => onCodeChange(e.target.value)}
            placeholder="Enter your code here..."
            className="h-full w-full font-code text-sm resize-none rounded-md"
            aria-label="Code Input"
          />
        </div>
        {aiFeedback && (
           <div className="mt-4">
            <h3 className="font-semibold mb-2 text-foreground">AI Feedback:</h3>
            <ScrollArea className="h-48 rounded-md border bg-secondary/50 p-4">
              <pre className="text-sm whitespace-pre-wrap font-code text-secondary-foreground">{aiFeedback}</pre>
            </ScrollArea>
           </div>
        )}
         {isLoading && !aiFeedback && (
          <div className="mt-4 flex items-center justify-center h-48 rounded-md border bg-secondary/50 p-4">
             <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            <p className="text-muted-foreground">Kiro is analyzing your code...</p>
          </div>
        )}
      </CardContent>
       <CardFooter className="flex-col items-stretch gap-4">
        <KiroSpecDisplay
          title="Code Feedback"
          spec={codeFeedbackSpec}
          trigger={
            <Button onClick={onGetFeedback} disabled={isLoading} className="w-full bg-accent hover:bg-accent/90 text-accent-foreground">
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
              Get AI Code Feedback
            </Button>
          }
        />
      </CardFooter>
    </Card>
  );
}
